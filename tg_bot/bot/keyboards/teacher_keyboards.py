"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è"""

import calendar
from datetime import datetime, timedelta

from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, \
    InlineKeyboardMarkup


def teacher_menu_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —É—á–∏—Ç–µ–ª—è"""

    kb_list = [
        [KeyboardButton(text='üë§–£—á–µ–Ω–∏–∫–∏'), KeyboardButton(text='üì© –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–µ–Ω–∏–∫–∞')],
        [KeyboardButton(text='üìù–õ–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã')],
    ]
    keyboard = ReplyKeyboardMarkup(
        keyboard=kb_list,
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    return keyboard


def students_kb(students):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–µ–Ω–∏–∫–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–≤"""

    kb_list = []
    for student in students:
        student_name = student.get('username')
        kb_list.append([
            InlineKeyboardButton(
                text=student_name, callback_data=f"show_lessons_of_student:{student.get('id')}"
            ),
            InlineKeyboardButton(
                text='üóë Delete', callback_data=f"delete_student:{student.get('id')}"
            )
        ])
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def lessons_of_student_kb(student):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞"""

    kb_list = []
    for lesson in student.get('lessons'):
        lesson_button = InlineKeyboardButton(
            text=f"{'‚úÖ' if lesson.get('is_done') else ''}{lesson.get('name')}",
            callback_data=f"show_lesson:{lesson.get('id')}:{student.get('id')}"
        )
        delete_button = InlineKeyboardButton(
            text='üóë Delete',
            callback_data=f"delete_lesson:{lesson.get('id')}",
        )
        kb_list.append([lesson_button, delete_button])

    kb_list.append([InlineKeyboardButton(
        text='‚ûï Add lesson',
        callback_data=f"add_lesson:{student.get('id')}"
    )])

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def lesson_files_kb(lesson_id, file_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–∞–±–∞–≤–ª–µ–Ω–∏—è –∏ –¥–≤—É—Ö —Ç–∏–ø–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —É—Ä–æ–∫–∞"""

    kb_list = [
        [InlineKeyboardButton(text='Add', callback_data=f'add_lesson_file:{lesson_id}')],
        [InlineKeyboardButton(text='Delete all', callback_data=f'delete_all_lesson_files:{lesson_id}:{file_type}'),
        InlineKeyboardButton(text='Delete multiple', callback_data=f'delete_lesson_files:{lesson_id}:{file_type}')],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def lesson_homework_kb(lesson_id, file_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–∞–±–∞–≤–ª–µ–Ω–∏—è –∏ –¥–≤—É—Ö —Ç–∏–ø–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π —É—Ä–æ–∫–∞"""

    kb_list = [
        [InlineKeyboardButton(text='Add', callback_data=f'add_lesson_homework:{lesson_id}')],
        [InlineKeyboardButton(text='Delete all', callback_data=f'delete_all_lesson_files:{lesson_id}:{file_type}'),
        InlineKeyboardButton(text='Delete multiple', callback_data=f'delete_lesson_files:{lesson_id}:{file_type}')],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def personal_files_kb(user_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–∞–±–∞–≤–ª–µ–Ω–∏—è –∏ –¥–≤—É—Ö —Ç–∏–ø–æ–≤ —É–¥–∞–ª–µ–Ω–∏—è –ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""

    kb_list = [
        [InlineKeyboardButton(text='Add', callback_data=f'add_personal_file:{user_id}')],
        [InlineKeyboardButton(text='Delete all', callback_data=f'delete_all_personal_files:{user_id}'),
        InlineKeyboardButton(text='Delete multiple', callback_data=f'pre_delete_personal_files')],
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def toggle_lesson_is_done_kb(lesson):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ–≥–æ —É—Ä–æ–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –º–µ–Ω—è–µ—Ç —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"""

    kb_list = [
        [InlineKeyboardButton(
            text=f"{'‚úÖ' if lesson.get('is_done') else lesson.get('name')}",
            callback_data=f"toggle_lesson_is_done:{lesson.get('id')}",
        )]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def delete_files_kb(lesson, selected_files, file_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–∞–π–ª—ã —É—Ä–æ–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞, –∞ —Ç–∞–∫ –∂–µ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è"""

    kb_list = []
    for file in lesson.get(file_type):
        is_selected = selected_files.get(str(file.get('id')), False)
        checkbox = '‚úÖ' if is_selected else ''
        file_button = InlineKeyboardButton(
            text=f"{checkbox} {file.get('file_path')}",
            callback_data=f"toggle_file:{file.get('id')}:{lesson.get('id')}:{file_type}",
        )
        kb_list.append([file_button])

    kb_list.append([InlineKeyboardButton(
        text="Delete files",
        callback_data=f"delete_selected_files:{lesson.get('id')}:{file_type}"
    )])
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def delete_personal_files_by_ids_kb(user, selected_files):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —á–µ–∫–±–æ–∫—Å–∞, –∞ —Ç–∞–∫ –∂–µ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è"""

    kb_list = []
    for file in user.get('personal_files'):
        is_selected = selected_files.get(str(file.get('id')), False)
        checkbox = '‚úÖ' if is_selected else ''
        file_button = InlineKeyboardButton(
            text=f"{checkbox} {file.get('file_path').split('/')[-1]}",
            callback_data=f"toggle_personal_file:{file.get('id')}",
        )
        kb_list.append([file_button])
    kb_list.append([InlineKeyboardButton(text="Delete files", callback_data=f'delete_selected_personal_files')])

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def add_comment_kb(lesson_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é —É—Ä–æ–∫–∞"""

    kb_list = [[InlineKeyboardButton(text='Add comment', callback_data=f'add_lesson_comment:{lesson_id}')]]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard


def generate_calendar(year, month):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ç–∞ –¥–∞—Ç—ã —É—Ä–æ–∫–∞"""

    keyboard = []

    month_name = calendar.month_name[month]
    keyboard.append([InlineKeyboardButton(text=f"üìÖ {month_name} {year}", callback_data="ignore")])

    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in days])

    month_calendar = calendar.monthcalendar(year, month)
    for week in month_calendar:
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(text=" ", callback_data="ignore"))  # –ü—É—Å—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
            else:
                date_str = f"{day:02d}-{month:02d}-{year}"
                row.append(InlineKeyboardButton(text=str(day), callback_data=f"select_date_{date_str}"))
        keyboard.append(row)

    prev_month = (datetime(year, month, 1) - timedelta(days=1)).month
    prev_year = (datetime(year, month, 1) - timedelta(days=1)).year

    next_month = (datetime(year, month, 28) + timedelta(days=4)).month
    next_year = (datetime(year, month, 28) + timedelta(days=4)).year

    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"change_month_{prev_year}_{prev_month}"),
        InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"change_month_{next_year}_{next_month}")
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)
