"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—Ä–æ–∫–∞–º–∏"""

import os
import random
import string

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile, CallbackQuery

from bot.api_helpers.lessons.api_lesson_requests import upload_file_in_lesson_request, \
    upload_homework_in_lesson_request, upload_solution_in_lesson_request, \
    upload_comments_in_lesson_request, get_lesson_request
from bot.api_helpers.teachers.api_teacher_requests import upload_personal_file_request
from bot.contexts import UploadFile
from bot.keyboards.student_keyboards import add_solution_kb
from bot.keyboards.teacher_keyboards import toggle_lesson_is_done_kb, lesson_files_kb, \
    lesson_homework_kb, add_comment_kb
from config import STATIC_URL, STATIC_PATH, BOT_NAME


def generate_random_string(length=4):
    """–§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞, —á—Ç–æ –± —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–π"""

    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))


async def upload_file_on_server(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""

    file = None
    file_name = None

    random_str = generate_random_string()

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è
    if message.document:
        file = message.document
        file_name = f"{random_str}_{file.file_name}"
    elif message.photo:
        file = message.photo[-1]
        file_name = f"{file.file_id}_{random_str}.jpg"
    elif message.video:
        file = message.video
        file_name = f"{file.file_id}_{random_str}.mp4"
    elif message.audio:
        file = message.audio
        file_name = f"{file.file_id}_{random_str}.mp3"

    if not file:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–æ–≥–ª–∞—Å–Ω–æ API Telegram
    if file.file_size > 20 * 1024 * 1024:
        return '–ü—Ä–µ–≤—ã—à–µ–Ω –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 20 –ú–±'

    await state.update_data(file_name=file_name)
    state_data = await state.get_data()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    file_type = state_data.get('file_type')
    file_path = os.path.join(f'{STATIC_PATH}{file_type}', file_name)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    file_info = await message.bot.get_file(file.file_id)
    await message.bot.download_file(file_info.file_path, file_path)


async def save_file_in_db(state):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""

    state_data = await state.get_data()

    if state_data.get('file_type') == 'files':
        return await upload_file_in_lesson_request(state_data.get('lesson_id'), state_data.get('file_name'))
    elif state_data.get('file_type') == 'homeworks':
        return await upload_homework_in_lesson_request(state_data.get('lesson_id'), state_data.get('file_name'))
    elif state_data.get('file_type') == 'solutions':
        return await upload_solution_in_lesson_request(state_data.get('lesson_id'), state_data.get('file_name'))
    elif state_data.get('file_type') == 'comments':
        return await upload_comments_in_lesson_request(state_data.get('lesson_id'), state_data.get('file_name'))
    else:
        return await upload_personal_file_request(state_data.get('author_id'), state_data.get('file_name'))


async def pre_upload_file(call: CallbackQuery, state: FSMContext, file_type: str):
    """
    –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –Ω–µ–º id —É—Ä–æ–∫–∞ –∏ —Ç–∏–ø —Ñ–∞–π–ª–∞.
    –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (handle_upload_file)
    """

    lesson_id = call.data.split(':')[1]

    await state.clear()
    await state.update_data(file_type=file_type, lesson_id=lesson_id)
    await call.message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
    await state.set_state(UploadFile.file)


async def show_files_by_type(files, file_type):
    """–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —É—Ä–æ–∫–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞"""

    media = []
    text = ''
    if file_type == 'files':
        text = '<b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã</b>\n'
    elif file_type == 'homeworks':
        text = '<b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n'
    elif file_type == 'completed_homeworks':
        text = '<b>–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</b>\n'
    elif file_type == 'comments_to_completed_homeworks':
        text = '<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—á–∏—Ç–µ–ª—è</b>\n'

    for file in files:
        file_path = file.get('file_path')
        file_url = (f"<a href='{STATIC_URL}{file_path}'>"
                    f"{file_path.split('/')[-1]}</a>")
        if file_path.endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp',
                               '.mp4', '.mov', '.avi', '.mkv', '.webm',
                               '.mp3', '.wav', '.ogg', '.flac', '.aac')):
            file_fs = FSInputFile(f'{STATIC_PATH}{file_path}')
            media.append(file_fs)
        else:
            text += f"{file_url}\n--------\n"

    return media, text


async def send_media(message, file, reply_markup=None):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∏—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""

    if file.path.endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp')):
        await message.answer_photo(photo=file, reply_markup=reply_markup)
    elif file.path.endswith(('.mp4', '.mov', '.avi', '.mkv', '.webm')):
        await message.answer_video(video=file, reply_markup=reply_markup)
    elif file.path.endswith(('.mp3', '.wav', '.ogg', '.flac', '.aac')):
        await message.answer_audio(audio=file, reply_markup=reply_markup)


async def show_lesson_for_student_details(message, lesson_id):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–∫ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—á–µ–Ω–∏–∫–∞. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫,
    –∑–∞—Ç–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —á–∞—Ç, –∑–∞—Ç–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    """

    lesson = await get_lesson_request(lesson_id)

    material_files_media, materials_text = await show_files_by_type(
        lesson.get('data', {}).get('files'),
        'files',
    )

    homework_media, homeworks_text = await show_files_by_type(
        lesson.get('data', {}).get('homeworks'),
        'homeworks',
    )

    completed_homework_media, completed_homeworks_text = await show_files_by_type(
        lesson.get('data', {}).get('completed_homeworks'),
        'completed_homeworks',
    )

    comments_to_completed_homework_media, comments_to_completed_homeworks_text = await show_files_by_type(
        lesson.get('data', {}).get('comments_to_completed_homeworks'),
        'comments_to_completed_homeworks',
    )

    await message.answer(materials_text, parse_mode='HTML')
    if material_files_media:
        for file in material_files_media[:-1]:
            await send_media(message, file)
        await send_media(message, material_files_media[-1])

    await message.answer(homeworks_text, parse_mode='HTML')
    if homework_media:
        for file in homework_media[:-1]:
            await send_media(message, file)
        await send_media(message, homework_media[-1])

    await message.answer(completed_homeworks_text, parse_mode='HTML')
    if completed_homework_media:
        for file in completed_homework_media[:-1]:
            await send_media(message, file)
        await send_media(message, completed_homework_media[-1])

    if comments_to_completed_homework_media:
        await message.answer(comments_to_completed_homeworks_text, parse_mode='HTML')
        for file in comments_to_completed_homework_media[:-1]:
            await send_media(message, file)
        await send_media(
            message,
            comments_to_completed_homework_media[-1],
            reply_markup=add_solution_kb(lesson_id),
        )
    else:
        await message.answer(
            comments_to_completed_homeworks_text, reply_markup=add_solution_kb(lesson_id), parse_mode='HTML'
        )


async def show_lesson_for_teacher_details(message, lesson_id):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É—Ä–æ–∫ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É—á–∏—Ç–µ–ª—è. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –≤–∏–¥–µ —Å—Å—ã–ª–æ–∫,
    –∑–∞—Ç–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –≤ —á–∞—Ç, –∑–∞—Ç–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    """

    lesson = await get_lesson_request(lesson_id)
    date = lesson.get('data', {}).get('date')
    year, month, day = date.split('-')
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –∏ –¥–∞—Ç—É —Å –∫–Ω–æ–ø–∫–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (—Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–∞–Ω–¥—ã Start)
    await message.answer(
        f"üìí \\|{day}\\-{month}\\-{year}\\| [Edit](https://t.me/{BOT_NAME}?start=edit_date_{lesson_id})",
        reply_markup=toggle_lesson_is_done_kb(lesson.get('data', {})),
        parse_mode="MarkdownV2",
    )

    material_files_media, materials_text = await show_files_by_type(
        lesson.get('data', {}).get('files'),
        'files',
    )

    homework_media, homeworks_text = await show_files_by_type(
        lesson.get('data', {}).get('homeworks'),
        'homeworks',
    )

    completed_homework_media, completed_homeworks_text = await show_files_by_type(
        lesson.get('data', {}).get('completed_homeworks'),
        'completed_homeworks',
    )

    comments_to_completed_homework_media, comments_to_completed_homeworks_text = await show_files_by_type(
        lesson.get('data', {}).get('comments_to_completed_homeworks'),
        'comments_to_completed_homeworks',
    )

    if material_files_media:
        await message.answer(materials_text, parse_mode='HTML')
        for file in material_files_media[:-1]:
            await send_media(message, file)
        await send_media(
            message, material_files_media[-1], reply_markup=lesson_files_kb(lesson_id, 'files')
        )
    else:
        await message.answer(
            materials_text, reply_markup=lesson_files_kb(lesson_id, 'files'), parse_mode='HTML'
        )

    if homework_media:
        await message.answer(homeworks_text, parse_mode='HTML')
        for file in homework_media[:-1]:
            await send_media(message, file)
        await send_media(
            message, homework_media[-1], reply_markup=lesson_homework_kb(lesson_id, 'homeworks')
        )
    else:
        await message.answer(
            homeworks_text, reply_markup=lesson_homework_kb(lesson_id, 'homeworks'), parse_mode='HTML'
        )

    await message.answer(completed_homeworks_text, parse_mode='HTML')
    if completed_homework_media:
        for file in completed_homework_media[:-1]:
            await send_media(message, file)
        await send_media(message, completed_homework_media[-1])

    if comments_to_completed_homework_media:
        await message.answer(comments_to_completed_homeworks_text, parse_mode='HTML')
        for file in comments_to_completed_homework_media[:-1]:
            await send_media(message, file)
        await send_media(
            message,
            comments_to_completed_homework_media[-1],
            reply_markup=add_comment_kb(lesson_id),
        )
    else:
        await message.answer(
            comments_to_completed_homeworks_text, reply_markup=add_comment_kb(lesson_id), parse_mode='HTML'
        )
