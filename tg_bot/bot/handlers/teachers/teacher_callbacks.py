from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from bot.api_helpers.teachers.api_teacher_requests import get_student_request, delete_lesson_request, \
    toggle_lesson_is_done_request, get_lesson_request, delete_files_in_lesson_request
from bot.contexts import AddLesson, UploadFile
from bot.functions import preparing_for_upload_file, show_lesson_details
from bot.keyboards.inline_keyboards import student_detail_kb, toggle_lesson_is_done_kb, delete_files_kb
from bot.routers import teacher_router


@teacher_router.callback_query(lambda c: c.data.startswith('show_student:'))
async def show_student(call: CallbackQuery):
    student_id = int(call.data.split(':')[1])
    student = await get_student_request(student_id)
    lessons = student['lessons']
    await call.message.answer(f'{student['username']}:', reply_markup=student_detail_kb(lessons))


@teacher_router.callback_query(lambda c: c.data.startswith('show_lesson:'))
async def show_lesson(call: CallbackQuery):
    lesson_id = call.data.split(':')[1]
    await show_lesson_details(call.message, lesson_id)


@teacher_router.callback_query(lambda c: c.data.startswith('add_lesson:'))
async def add_lesson(call: CallbackQuery, state: FSMContext):
    student_id = call.data.split(':')[1]
    await state.clear()
    await state.update_data(student_id=student_id)

    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:")
    await state.set_state(AddLesson.lesson_name)


@teacher_router.callback_query(lambda c: c.data.startswith('delete_lesson:'))
async def delete_lesson(call: CallbackQuery):
    lesson_id = call.data.split(':')[1]

    if await delete_lesson_request(lesson_id):
        await call.answer("–£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ", show_alert=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫" (—á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫)
        student_id = int(call.message.reply_markup.inline_keyboard[-1][0].callback_data.split(':')[1])
        student = await get_student_request(student_id)
        lessons = student['lessons']

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è—è —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
        await call.message.edit_text(
            text=f'{student["username"]}:',
            reply_markup=student_detail_kb(lessons)
        )
    else:
        await call.message.answer('–ù–µ —É–¥–∞–ª–æ–≤—å —É–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫')


@teacher_router.callback_query(lambda c: c.data.startswith('add_lesson_file:'))
async def add_lesson_file(call: CallbackQuery, state: FSMContext):
    await preparing_for_upload_file(call, state, "files")


@teacher_router.callback_query(lambda c: c.data.startswith('add_lesson_homework:'))
async def add_lesson_homework(call: CallbackQuery, state: FSMContext):
    await preparing_for_upload_file(call, state, "homeworks")


@teacher_router.callback_query(lambda c: c.data.startswith('add_personal_file:'))
async def add_personal_file(call: CallbackQuery, state: FSMContext):
    user_id = call.data.split(':')[1]
    await state.clear()
    await state.update_data(author_id=user_id)
    await state.update_data(file_type='personal')
    await call.message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
    await state.set_state(UploadFile.file)


@teacher_router.callback_query(lambda c: c.data.startswith('toggle_lesson_is_done:'))
async def toggle_lesson_is_done(call: CallbackQuery):
    lesson_id = call.data.split(':')[1]
    await toggle_lesson_is_done_request(lesson_id)
    lesson = await get_lesson_request(lesson_id)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await call.message.edit_reply_markup(reply_markup=toggle_lesson_is_done_kb(lesson))
    await call.answer("–°—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω", show_alert=True)


@teacher_router.callback_query(lambda c: c.data.startswith('delete_lesson_files:'))
async def delete_lesson_files(call: CallbackQuery, state: FSMContext):
    lesson_id = call.data.split(':')[1]
    lesson = await get_lesson_request(lesson_id)
    await state.update_data(selected_files={"1": False})
    current_state = await state.get_data()
    print('-------------------------------------------------------------')
    print(current_state)
    await call.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
        reply_markup=delete_files_kb(lesson, current_state['selected_files'])
    )


@teacher_router.callback_query(lambda c: c.data.startswith('toggle_file:'))
async def toggle_file(call: CallbackQuery, state: FSMContext):
    file_id = call.data.split(':')[1]
    lesson_id = call.data.split(':')[2]
    current_state = await state.get_data()
    print('-------------------------------------------------------------')
    print(current_state)
    selected_files = current_state['selected_files']
    selected_files[file_id] = not selected_files.get(file_id, False)
    await state.update_data(selected_files=selected_files)
    lesson = await get_lesson_request(lesson_id)
    await call.message.edit_reply_markup(reply_markup=delete_files_kb(lesson, selected_files))
    await call.answer()


@teacher_router.callback_query(lambda c: c.data.startswith('delete_selected_files:'))
async def delete_selected_files(call: CallbackQuery, state: FSMContext):
    current_state = await state.get_data()
    selected_files = current_state['selected_files']
    files_to_delete = [file_id for file_id, selected in selected_files.items() if selected]
    if files_to_delete:
        await delete_files_in_lesson_request(files_to_delete)
        await state.clear()
        await call.answer("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã", show_alert=True)
    else:
        await call.answer("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", show_alert=True)

    lesson_id = call.data.split(':')[1]
    lesson = await get_lesson_request(lesson_id)
    await call.message.edit_reply_markup(reply_markup=delete_files_kb(lesson, selected_files))
