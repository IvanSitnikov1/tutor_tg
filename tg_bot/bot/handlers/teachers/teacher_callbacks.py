"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π"""

from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from bot.api_helpers.lessons.api_lesson_requests import toggle_lesson_is_done_request, \
    get_lesson_request, delete_lesson_request, delete_files_in_lesson_request, \
    delete_homeworks_in_lesson_request, delete_all_files_requests, update_lesson_date_requests
from bot.api_helpers.students.api_student_requests import get_student_request, \
    delete_student_request
from bot.api_helpers.teachers.api_teacher_requests import get_teacher_request, delete_personal_files_request
from bot.contexts import AddLesson, UploadFile
from bot.functions.lessons.lesson_funcs import show_lesson_for_teacher_details, pre_upload_file
from bot.functions.teachers.teacher_funcs import show_personal_files
from bot.keyboards.teacher_keyboards import delete_personal_files_by_ids_kb, lessons_of_student_kb, \
    toggle_lesson_is_done_kb, delete_files_kb, students_kb, generate_calendar
from bot.routers import teacher_router
from bot.storage import STUDENTS
from loggers import logger


@teacher_router.callback_query(lambda c: c.data.startswith('show_lessons_of_student:'))
async def show_lessons_of_student(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ —É—Ä–æ–∫–∏"""

    student_id = int(call.data.split(':')[1])
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞ —Å id {student_id}')
    student = await get_student_request(student_id)
    await call.message.answer(
        f"{student.get('data', {}).get('username')}:",
        reply_markup=lessons_of_student_kb(student.get('data', {})),
    )


@teacher_router.callback_query(
    lambda c: c.data.startswith('show_lesson:') and c.from_user.id not in STUDENTS,
)
async def show_lesson(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —É—Ä–æ–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–∫–∞"""

    lesson_id = call.data.split(':')[1]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å id {lesson_id}')
    await show_lesson_for_teacher_details(call.message, lesson_id)


@teacher_router.callback_query(lambda c: c.data.startswith('add_lesson:'))
async def add_lesson(call: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç id —É—á–µ–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–µ
    —Å–æ—Å—Ç–æ—è–Ω–∏–µ (handle_lesson_name_message)
    """

    student_id = call.data.split(':')[1]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —É—á–µ–Ω–∏–∫—É —Å id {student_id}')
    await state.clear()
    await state.update_data(student_id=int(student_id))

    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:")
    await state.set_state(AddLesson.lesson_name)


@teacher_router.callback_query(lambda c: c.data.startswith('delete_lesson:'))
async def delete_lesson(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞ –∏ —É–¥–∞–ª—è–µ—Ç —É—Ä–æ–∫"""

    lesson_id = call.data.split(':')[1]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ —Å id {lesson_id}')
    response = await delete_lesson_request(lesson_id)
    logger.info(response.get('detail'))

    await call.answer(response.get('detail'), show_alert=True)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫" (—á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫)
    student_id = int(call.message.reply_markup.inline_keyboard[-1][0].callback_data.split(':')[1])
    logger.info(f'–û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞ —Å id {student_id} –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞')
    student = await get_student_request(student_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è—è —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤
    await call.message.edit_text(
        text=f"{student.get('username')}:",
        reply_markup=lessons_of_student_kb(student.get('data', {}))
    )


@teacher_router.callback_query(lambda c: c.data.startswith('add_lesson_file:'))
async def add_lesson_file(call: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —É—Ä–æ–∫–∞, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
    –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–≥–æ —Ç–∏–ø –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """

    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∫ —É—Ä–æ–∫—É')
    await pre_upload_file(call, state, "files")


@teacher_router.callback_query(lambda c: c.data.startswith('add_lesson_homework:'))
async def add_lesson_homework(call: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
    –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–≥–æ —Ç–∏–ø –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """

    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∫ —É—Ä–æ–∫—É')
    await pre_upload_file(call, state, "homeworks")


@teacher_router.callback_query(lambda c: c.data.startswith('add_lesson_comment:'))
async def add_lesson_comment(call: CallbackQuery, state: FSMContext):
    """
    –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –¥–æ–º–∞—à–Ω–µ–º—É –∑–∞–¥–∞–Ω–∏—é —É—Ä–æ–∫–∞, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é
    –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ñ–∞–π–ª–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–≥–æ —Ç–∏–ø –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    """

    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É—Ä–æ–∫—É')
    await pre_upload_file(call, state, "comments")


@teacher_router.callback_query(lambda c: c.data.startswith('add_personal_file:'))
async def add_personal_file(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞"""

    user_id = call.data.split(':')[1]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {user_id}')
    await state.clear()
    await state.update_data(author_id=user_id)
    await state.update_data(file_type='personal')
    await call.message.answer("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª.")
    await state.set_state(UploadFile.file)


@teacher_router.callback_query(lambda c: c.data.startswith('toggle_lesson_is_done:'))
async def toggle_lesson_is_done(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º —É—Ä–æ–∫–µ. –ò–∑–º–µ–Ω—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å (–≤—ã–ø–æ–ª–Ω–µ–Ω/–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω)"""

    lesson_id = call.data.split(':')[1]
    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Ä–æ–∫–∞')
    await toggle_lesson_is_done_request(lesson_id)
    lesson = await get_lesson_request(lesson_id)

    if lesson.get('data'):
        logger.info('–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ')
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await call.message.edit_reply_markup(reply_markup=toggle_lesson_is_done_kb(lesson.get('data')))
        await call.answer('–°—Ç–∞—Ç—É—Å —É—Ä–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω', show_alert=True)
    else:
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ä–æ–∫–∞')
        await call.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Ä–æ–∫–∞', show_alert=True)


@teacher_router.callback_query(lambda c: c.data.startswith('delete_lesson_files:'))
async def delete_lesson_files(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —É—Ä–æ–∫–∞. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""

    lesson_id = call.data.split(':')[1]
    file_type = call.data.split(':')[2]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ - {file_type} –∏–∑ —É—Ä–æ–∫–∞ —Å id {lesson_id}')
    lesson = await get_lesson_request(lesson_id)
    current_state = await state.get_data()
    await call.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
        reply_markup=delete_files_kb(
            lesson.get('data', {}),
            current_state.get('selected_files', {}),
            file_type,
        )
    )


@teacher_router.callback_query(lambda c: c.data.startswith('toggle_file:'))
async def toggle_file(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ —Ñ–∞–π–ª —É—Ä–æ–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –æ—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –≥–∞–ª–æ—á–∫–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""

    file_id = call.data.split(':')[1]
    lesson_id = call.data.split(':')[2]
    file_type = call.data.split(':')[3]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–∞–π–ª–∞ —Å id {file_id}')

    lesson = await get_lesson_request(lesson_id)
    current_state = await state.get_data()
    selected_files = current_state.get('selected_files', {})
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–µ
    selected_files[file_id] = not selected_files.get(file_id, False)
    await state.update_data(selected_files=selected_files)
    await call.message.edit_reply_markup(reply_markup=delete_files_kb(
        lesson.get('data', {}), selected_files, file_type
    ))
    await call.answer()


@teacher_router.callback_query(lambda c: c.data.startswith('delete_selected_files:'))
async def delete_selected_files(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å–æ–±–∏—Ä–∞–µ—Ç id —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —É–¥–∞–ª—è–µ—Ç"""

    lesson_id = call.data.split(':')[1]
    file_type = call.data.split(':')[2]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ - {file_type} –∏–∑ —É—Ä–æ–∫–∞ —Å id {lesson_id}')

    current_state = await state.get_data()
    selected_files = current_state.get('selected_files', {})

    files_to_delete = [file_id for file_id, is_selected in selected_files.items() if is_selected]
    if files_to_delete:
        if file_type == 'files':
            response = await delete_files_in_lesson_request(files_to_delete)
        else:
            response = await delete_homeworks_in_lesson_request(files_to_delete)

        try:
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã')
            await call.answer(response.get('detail'), show_alert=True)
        except AttributeError:
            logger.info('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')
            await call.answer('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', show_alert=True)
        await state.clear()
    else:
        logger.error('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        await call.answer("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", show_alert=True)

    lesson = await get_lesson_request(lesson_id)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await call.message.edit_reply_markup(reply_markup=delete_files_kb(
        lesson.get('data', {}), {}, file_type
    ))


@teacher_router.callback_query(lambda c: c.data == 'pre_delete_personal_files')
async def pre_delete_personal_files(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤. –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""

    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —É—á–∏—Ç–µ–ª—è')
    user = await get_teacher_request(call.from_user.id)
    current_state = await state.get_data()
    await call.message.answer(
        text='–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è',
        reply_markup=delete_personal_files_by_ids_kb(
            user.get('data', {}),
            current_state.get('selected_files', {}),
        ),
    )


@teacher_router.callback_query(lambda c: c.data.startswith('toggle_personal_file:'))
async def toggle_personal_file(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –ª–∏—á–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏, –æ—Ç–º–µ—á–∞–µ—Ç —Ñ–∞–π–ª –≥–∞–ª–æ—á–∫–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç"""

    file_id = call.data.split(':')[1]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å id {file_id}')
    current_state = await state.get_data()
    selected_files = current_state.get('selected_files', {})
    selected_files[file_id] = not selected_files.get(file_id, False)
    await state.update_data(selected_files=selected_files)
    user = await get_teacher_request(call.from_user.id)
    await call.message.edit_reply_markup(reply_markup=delete_personal_files_by_ids_kb(
        user.get('data', {}), selected_files))
    await call.answer()


@teacher_router.callback_query(lambda c: c.data == 'delete_selected_personal_files')
async def delete_selected_personal_files(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —Å–æ–±–∏—Ä–∞–µ—Ç id —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —É–¥–∞–ª—è–µ—Ç"""

    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —É—á–∏—Ç–µ–ª—è')
    current_state = await state.get_data()
    selected_files = current_state['selected_files']
    files_to_delete = [file_id for file_id, selected in selected_files.items() if selected]
    if files_to_delete:
        response = await delete_personal_files_request(files_to_delete)
        try:
            logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã')
            await call.answer(response.get('detail'), show_alert=True)
        except AttributeError:
            logger.info('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')
            await call.answer('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', show_alert=True)
        await state.clear()
    else:
        logger.error('–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è')
        await call.answer("–ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π", show_alert=True)

    user = await get_teacher_request(call.from_user.id)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
    await call.message.edit_reply_markup(reply_markup=delete_personal_files_by_ids_kb(
        user.get('data'), {}
    ))


@teacher_router.callback_query(lambda c: c.data.startswith('delete_all_lesson_files:'))
async def delete_all_lesson_files(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —É—Ä–æ–∫–∞, —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫"""

    lesson_id = call.data.split(':')[1]
    file_type = call.data.split(':')[2]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —Ç–∏–ø–∞ - {file_type} –∏–∑ —É—Ä–æ–∫–∞ —Å id {lesson_id}')

    response = await delete_all_files_requests(lesson_id, file_type)
    try:
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã')
        await call.answer(response.get('detail'), show_alert=True)
    except AttributeError:
        logger.info('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')
        await call.answer('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', show_alert=True)
    await show_lesson_for_teacher_details(call.message, lesson_id)


@teacher_router.callback_query(lambda c: c.data.startswith('delete_all_personal_files:'))
async def delete_all_personal_files(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤, —É–¥–∞–ª—è–µ—Ç –∏—Ö –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""

    user_id = call.data.split(':')[1]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {user_id}')

    user = await get_teacher_request(user_id)
    personal_files_ids = [file.get('id') for file in user.get('data', {}).get('personal_files')]
    response = await delete_personal_files_request(personal_files_ids)
    try:
        logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã')
        await call.answer(response.get('detail'), show_alert=True)
    except AttributeError:
        logger.info('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã')
        await call.answer('–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã', show_alert=True)
    await show_personal_files(call.message)


@teacher_router.callback_query(lambda c: c.data.startswith('delete_student:'))
async def delete_student(call: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞, —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤"""

    student_id = call.data.split(':')[1]
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ —Å id {student_id}')

    deleted_student = await delete_student_request(student_id)
    logger.info(deleted_student.get('detail'))
    await call.message.answer(deleted_student.get('detail'))

    current_user = await get_teacher_request(call.message.from_user.id)
    await call.message.edit_text(
        '–í–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã:',
        reply_markup=students_kb(current_user.get('data', {}).get('students', [])),
    )


@teacher_router.callback_query(lambda c: c.data.startswith("select_date_"))
async def process_date_selection(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–æ–π —É—Ä–æ–∫–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç—Ç—É –¥–∞—Ç—É –≤ —É—Ä–æ–∫"""

    # –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥-–º–º-–≥–≥–≥–≥"
    new_date = call.data.split("_")[2]

    state = await state.get_data()
    lesson_id = int(state.get('lesson_id'))
    logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —É—Ä–æ–∫–∞ —Å id {lesson_id} –Ω–∞ {new_date}')
    response = await update_lesson_date_requests(lesson_id, new_date)
    await call.message.answer(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {new_date}")
    logger.info(response.get('detail'))
    await call.message.answer(response.get('detail'))
    await call.answer()


@teacher_router.callback_query(lambda c: c.data.startswith("change_month_"))
async def process_change_month(callback: CallbackQuery):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã –º–µ—Å—è—Ü–∞ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —ç—Ç—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""

    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É –º–µ—Å—è—Ü–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å –≤—ã–±–æ—Ä–æ–º –¥–∞—Ç—ã —É—Ä–æ–∫–∞')
    _, _, year, month = callback.data.split("_")
    year, month = int(year), int(month)

    await callback.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞:",
        reply_markup=generate_calendar(year, month)
    )
    await callback.answer()
