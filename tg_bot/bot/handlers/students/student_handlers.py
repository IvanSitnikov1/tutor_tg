"""–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤"""

from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from bot.api_helpers.teachers.api_teacher_requests import get_teacher_request
from bot.contexts import UploadFile
from bot.functions.lessons.lesson_funcs import upload_file_on_server, save_file_in_db, \
    show_lesson_for_student_details
from bot.api_helpers.students.api_student_requests import get_student_request
from bot.keyboards.student_keyboards import show_lessons_of_student_kb
from bot.routers import student_router
from bot.storage import STUDENTS
from loggers import logger


@student_router.message(
    F.text.in_({'üìí–£—Ä–æ–∫–∏'}),
    lambda message: message.from_user.id in STUDENTS,
)
async def handle_student_message(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–ø–∏—Å–∫–∞ —É—Ä–æ–∫–æ–≤"""

    logger.info('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–∞')
    if message.text == 'üìí–£—Ä–æ–∫–∏':
        logger.info(f'–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ —É—á–µ–Ω–∏–∫–∞ —Å id {message.from_user.id}')
        student = await get_student_request(message.from_user.id)
        await message.answer('–£—Ä–æ–∫–∏', reply_markup=show_lessons_of_student_kb(student.get('data', {}).get('lessons')))


@student_router.message(
    lambda message: (message.document or message.photo or message.video or message.audio)
                    and message.from_user.id in STUDENTS,
    UploadFile.file,
)
async def handle_upload_file(message: Message, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –∑–∞—Ç–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —É—Ä–æ–∫"""

    logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ  –æ—Ç —É—á–µ–Ω–∏–∫–∞ —Å —Ñ–∞–π–ª–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏')
    upload_file_error = await upload_file_on_server(message, state)
    if upload_file_error:
        logger.error(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä: {upload_file_error}')
        await message.answer(upload_file_error)
        return
    logger.info('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
    saved_file = await save_file_in_db(state)
    logger.info(saved_file.get('detail'))

    await message.answer(f"{saved_file.get('detail')}")
    state_data = await state.get_data()
    await show_lesson_for_student_details(message, state_data.get('lesson_id'))

    await state.clear()


@student_router.message()
async def handle_unknown(message: Message):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Ç—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    logger.info(f'–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message}')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    student = await get_student_request(message.from_user.id)
    teacher = await get_teacher_request(message.from_user.id)
    if student.get('data', None) or teacher.get('data', None):
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å "
                             "–º–µ–Ω—é(/menu).")
    else:
        logger.info('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ')
        await message.answer('–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è(/start).')
